#fastqc all files

fastqc *.fastq

or

fastqc *.fastq.gz


#index the genome

#UNZIP THE FILE FIRST
gunzip my_genome.fa.gz

#index the genome
bwa index my_genome.fa


# mapping, sam to bam, sorting bam

for sample in `ls *.fq.gz | cut -f1 -d'_' | sort -u`; do bwa mem -t 6 ../my_genome.fa.gz ${sample}_1.fq.gz ${sample}_2.fq.gz  | samtools view -@6 -b - | samtools sort -@6 - > ./bam/${sample}.bam; done

for sample in `ls *.bam | cut -f1 -d'.' | sort -u`; do java -Xmx16G -jar My_PATH/picard.jar AddOrReplaceReadGroups I=${sample}.bam O=${sample}_rg.bam RGID=${sample} RGLB=${sample} RGPL=illumina RGPU=unit1 RGSM=${sample}; done

samtools merge -@6 -r my_genome.bam S1_rg.bam S2_rg.bam S3_rg.bam S4_rg.bam S5_rg.bam S6_rg.bam S7_rg.bam S8_rg.bam S9_rg.bam S10_rg.bam S11_rg.bam S12_rg.bam S13_rg.bam S14_rg.bam; samtools sort -@6 -m 2G my_genome.bam > my_genome.sorted.bam; samtools index -@6 -m 2G my_genome.sorted.bam

samtools mpileup -uf ../../my_genome.fa ./my_genome.sorted.bam | bcftools call -vmO z -o ./My_PATH/my_genome.vcf.gz

#filter the uncompressed vcf file
bcftools filter -i'QUAL>20 && DP>10' my_genome.vcf -o my_genome_filtered_vcf.vcf

#building snpeff database
java -jar snpEff.jar build -gtf22 -v my_genome_gen

#annotation of filtered vcf file
java -Xmx4g -jar snpEff.jar my_genome_ens_V1 -no-downstream -no-intergenic -no-upstream /My_PATH/my_genome_filtered_vcf.vcf.gz > /My_PATH/my_genome_annotated_after_filtering.vcf
